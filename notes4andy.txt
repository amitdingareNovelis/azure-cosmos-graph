# CosmosDB GraphDB Project - Six Degrees of Julia Roberts

## IMDb Data

I downloaded the raw data from here:

- http://www.imdb.com/interfaces/
- https://datasets.imdbws.com

## Wrangling

I filtered and wrangled the raw data with python to get a managable
set of data to load into the DB.  The algorithm is driven by this list
of actors.

    def actors_for_candidate_movies(self):
        actors = dict()
        actors['nm0000102'] = 'kevin_bacon'
        actors['nm0000113'] = 'sandra_bullock'
        actors['nm0000126'] = 'kevin_costner'
        actors['nm0000148'] = 'harrison_ford'
        actors['nm0000152'] = 'richard_gere'
        actors['nm0000158'] = 'tom_hanks'
        actors['nm0000206'] = 'keanu_reeves'
        actors['nm0000210'] = 'julia_roberts'
        actors['nm0000234'] = 'charlize_theron'
        actors['nm0177896'] = 'bradley_cooper'
        actors['nm1297015'] = 'emma_stone'
        actors['nm2225369'] = 'jennifer_lawrence'
        return actors

The filtering logic then extracts just the movies that these actors were
in, and the actors that were also in those movies.

## Gremlin Query Statement Creation

I wanted to decouple the Gremlin Query Creation from the actual loading
of the DB, so the wrangled data is read to produce file 'drop_and_load_queries.txt'.
I did this so I could "sanity check" the statements before loading the DB.
This file is in the Azure Blob Storage account for your reference.

In short, there are two kinds of Vertices, Movies and People, created like this:

g.addV('movie').property('id', 'tt0087277').property('title', 'Footloose')
g.addV('movie').property('id', 'tt0100405').property('title', 'Pretty Woman')

g.addV('person').property('id', 'nm0000102').property('name', 'Kevin Bacon')
g.addV('person').property('id', 'nm0000210').property('name', 'Julia Roberts')

Edges connecting the Person to each movie they're in are created like this:
g.V('nm0000102').addE('in').to(g.V('tt0087277')).property('title', 'Footloose')

Edges connecting People-to-People in the same movie are created like this.
Note that I'm creating two Edges for each Pair of People.  For example,
Julia Roberts knows Richard Gere, and Richard Gere knows Julia Roberts.

$ cat data/processed/drop_and_load_queries.txt | grep nm0000210 | grep nm0000152
g.V('nm0000152').addE('knows').to(g.V('nm0000210')).property('title', 'Runaway Bride')
g.V('nm0000210').addE('knows').to(g.V('nm0000152')).property('title', 'Runaway Bride')

## Gremlin Query Statement Execution

A separate python process reads file 'drop_and_load_queries.txt' and loads each
row into the DB like this:

    def execute_query(self, query, sleep_time=0.25):
        if query:
            callback = self.gremlin_client.submitAsync(query)
            if callback.result() is None:
                print("query not successful")
            time.sleep(sleep_time)

## Storage Account

These two files are in the Azure Blob Storage account for your reference.
 - notes4andy.txt             (this file)
 - drop_and_load_queries.txt  (the Gremlin statements used to load the DB)

name:     cjoakimgraphdata
key:      fwZsiatGhgjwL/c9vha5FDmYoP+A8t0eDBr0UoV/AU3IvG3JfKPp1cguwviFVk/jir0udiZAouheXtI+dvqO7w==
conn_str: DefaultEndpointsProtocol=https;AccountName=cjoakimgraphdata;AccountKey=fwZsiatGhgjwL/c9vha5FDmYoP+A8t0eDBr0UoV/AU3IvG3JfKPp1cguwviFVk/jir0udiZAouheXtI+dvqO7w==;EndpointSuffix=core.windows.net

## Queries

This is where I'm struggling.  Gremlin is new to me and I'm not sure how to construct
useful queries like "what's the path from kevin bacon to richard gere" based on the
people that they know and those person-to-person Edges.

I'm executing the queries with a python client so that I can capture and examine the
JSON results, but the queries can also be run in the Azure Portal UI.

These queries are working as expected, I think:

- Find Footloose (vertex only)
  g.V().has('label','movie').has('id','tt0087277')

- Find Pretty Woman (vertex only)
  g.V().has('label','movie').has('id','tt0100405')

- Find Kevin Bacon (vertex only)
  g.V().has('label','person').has('id','nm0000102')

- Who knows Julia Roberts?
  g.V('nm0000210').out('knows')

- What movies is Julia Roberts in?
  g.V('nm0000210').out('in')

- What vertices are connected to Julia Roberts?  (includes both people and movies)
  g.V('nm0000210').bothE().inV()


The graph TRAVERSAL queries are where I'm struggling, I'm not sure
how to phrase these in Gremlin.

- Who is in the movie Pretty Woman?
  g.V('nm0000210').bothE().inV()   (this returns only the Edges, not the connected Person Vertices)

- What's the path from Julia Roberts to Richard Gere?
  answer: they were in several moves together including 'Runaway Bride'.

  g.V('nm0000210').bothE().where(otherV().hasId('nm0000152')).path()  ???


- What's the path from Julia Roberts to Diane Lane?
  answer: Julia worked with Richard Gere in Runaway Bride, and Richard worked with Diane Lane in Cotton Club

  g.V('nm0000210').bothE().where(otherV().hasId('nm0000178')).path()  ???
  result set is empty


Also, regarding Person-to-Person Edges.  Do they have to be created in "both directions",
for example: from Person A to Person B AND from Person B to Person A?  Or should one A->B Edge suffice?
